{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/Header.jsx","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","App.jsx","hooks/useContractConfig.js","index.jsx"],"names":["Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","indexOf","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","name","chainId","rpcUrl","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","bsctestnet","bscmainnet","NETWORK","n","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","Blockie","AddressInput","setValue","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","useCallback","newValue","resolveName","possibleAddress","scanner","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","id","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","useEffect","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","key","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","length","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","map","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","values","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","injectedProvider","Header","subTitle","contractListPromise","loadAppContracts","config","default","deployedContracts","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","BufferList","ipfs","ipfsAPI","host","port","protocol","targetNetwork","STARTING_JSON","external_url","image","attributes","trait_type","getFromIPFS","hashToGet","get","file","path","content","chunk","append","scaffoldEthProvider","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","_options","enable","authereum","Authereum","App","_network","setInjectedProvider","setAddress","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","contractsConfig","setContractsConfig","loadFunc","useContractConfig","readContracts","writeContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","useContractReader","transferEvents","useEventListener","yourBalance","setYourCollectibles","collectibleUpdate","tokenIndex","YourCollectible","tokenOfOwnerByIndex","tokenId","tokenURI","ipfsHash","replace","jsonManifestBuffer","jsonManifest","toString","uri","owner","updateYourCollectibles","networkDisplay","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Web3Provider","code","reason","route","setRoute","pathname","faucetHint","connection","faucetClicked","setFaucetClicked","weiAmount","addr","setAddr","web3","Web3","givenProvider","selectedKeys","Item","confirm","exact","for","marhin","paddingBottom","toWei","NNNToken","mint","prevTheme","subgraphUri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById"],"mappings":"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","file":"static/js/main.b1ec005f.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"Harmony Testnet\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"Harmony Mainnet\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  bsctestnet: {\n    name: \"bsctestnet\",\n    color: \"#efd368\",\n    chainId: 97,\n    rpcUrl: `https://data-seed-prebsc-1-s1.binance.org:8545`,\n    faucet: \"https://testnet.binance.org/faucet-smart\",\n    blockExplorer: \"https://testnet.bscscan.com/\",\n  },\n  bscmainnet: {\n    name: \"bscMainnet\",\n    color: \"#evd358\",\n    chainId: 56,\n    rpcUrl: `https://bsc-dataseed.binance.org/`,\n    blockExplorer: \"https://bscscan.com/\",\n    gasPrice: 20000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      let options = null;\n      let notify = null;\n      if (navigator.onLine) {\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) { }\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.signer ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : 'input_' + inputIndex + '_'\n  return functionInfo.name + \"_\" + name + '_' + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  result = tryToDisplay(returned);\n                }\n                catch (err) {\n                  console.error(err)\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () => {\n      const results = contract\n        ? Object.values(contract.interface.functions).filter(\n          fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n        )\n        : []\n      return results;\n    },\n    [contract, show],\n  );\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n\n    const contractFunc = contractFuncInfo.stateMutability === \"view\" || contractFuncInfo.stateMutability === \"pure\"\n      ? contract[contractFuncInfo.name]\n      : contract.connect(signer)[contractFuncInfo.name];\n\n    if (typeof contractFunc === \"function\") {\n\n      if (isQueryable(contractFuncInfo)) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo.name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n          />\n        );\n      }\n\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo.name}\n          contractFunction={contractFunc\n          }\n          functionInfo={contractFuncInfo}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) { }\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n  return(null);\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/austintgriffith/scaffold-eth\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title=\"\"\n        subTitle=\"\"\n      />\n    </a>\n  );\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\n//const externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  //console.log(\"contract config\", config)\r\n  //config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  return undefined;\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Address, AddressInput, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport {INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport {\n  useEventListener,\n} from \"eth-hooks/events/useEventListener\";\nimport {\n  useExchangeEthPrice,\n} from \"eth-hooks/dapps/dex\";\n// import Hints from \"./Hints\";\n\nconst { BufferList } = require(\"bl\");\n// https://www.npmjs.com/package/ipfs-http-client\nconst ipfsAPI = require(\"ipfs-http-client\");\nconst ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\n\nimport { useContractConfig } from \"./hooks\"\nimport Portis from \"@portis/web3\";\nimport Fortmatic from \"fortmatic\";\nimport Authereum from \"authereum\";\nimport Web3 from 'web3';\n\nconst { ethers } = require(\"ethers\");\n\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.bsctestnet; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// EXAMPLE STARTING JSON:\nconst STARTING_JSON = {\n  description: \"It's actually a bison?\",\n  external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\n  image: \"https://austingriffith.com/images/paintings/buffalo.jpg\",\n  name: \"Buffalo\",\n  attributes: [\n    {\n      trait_type: \"BackgroundColor\",\n      value: \"green\",\n    },\n    {\n      trait_type: \"Eyes\",\n      value: \"googly\",\n    },\n  ],\n};\n\n// helper function to \"Get\" from IPFS\n// you usually go content.toString() after this...\nconst getFromIPFS = async hashToGet => {\n  for await (const file of ipfs.get(hashToGet)) {\n    console.log(file.path);\n    if (!file.content) continue;\n    const content = new BufferList();\n    for await (const chunk of file.content) {\n      content.append(chunk);\n    }\n    console.log(content);\n    return content;\n  }\n};\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst poktMainnetProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\") : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n\n    },\n    portis: {\n      display: {\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n        name: \"Portis\",\n        description: \"Connect to Portis App\",\n      },\n      package: Portis,\n      options: {\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n      },\n    },\n    fortmatic: {\n      package: Fortmatic, // required\n      options: {\n        key: \"pk_live_5A7C91B2FC585A17\", // required\n      },\n    },\n    // torus: {\n    //   package: Torus,\n    //   options: {\n    //     networkParams: {\n    //       host: \"https://localhost:8545\", // optional\n    //       chainId: 1337, // optional\n    //       networkId: 1337 // optional\n    //     },\n    //     config: {\n    //       buildEnv: \"development\" // optional\n    //     },\n    //   },\n    // },\n    \"custom-walletlink\": {\n      display: {\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n        name: \"Coinbase\",\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n      },\n      package: walletLinkProvider,\n      connector: async (provider, _options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n    authereum: {\n      package: Authereum, // required\n    },\n  },\n});\n\nfunction App(props) {\n  const mainnetProvider =\n    poktMainnetProvider && poktMainnetProvider._isProvider\n      ? poktMainnetProvider\n      : scaffoldEthProvider && scaffoldEthProvider._network\n      ? scaffoldEthProvider\n      : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  const contractConfig = useContractConfig();\n  //console.log(\"contractConfig\", contractConfig)\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const balance = useContractReader(readContracts, \"YourCollectible\", \"balanceOf\", [address]);\n  console.log(\"🤗 balance:\", balance);\n\n  // 📟 Listen for broadcast events\n  const transferEvents = useEventListener(readContracts, \"YourCollectible\", \"Transfer\", localProvider, 1);\n  console.log(\"📟 Transfer events:\", transferEvents);\n\n  //\n  // 🧠 This effect will update yourCollectibles by polling when your balance changes\n  //\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [yourCollectibles, setYourCollectibles] = useState();\n\n  useEffect(() => {\n    const updateYourCollectibles = async () => {\n      const collectibleUpdate = [];\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await readContracts.YourCollectible.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.YourCollectible.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n\n          const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\n          console.log(\"ipfsHash\", ipfsHash);\n\n          const jsonManifestBuffer = await getFromIPFS(ipfsHash);\n\n          try {\n            const jsonManifest = JSON.parse(jsonManifestBuffer.toString());\n            console.log(\"jsonManifest\", jsonManifest);\n            collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...jsonManifest });\n          } catch (e) {\n            console.log(e);\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setYourCollectibles(collectibleUpdate);\n    };\n    updateYourCollectibles();\n  }, [address, yourBalance]);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId == 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"1\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  const [yourJSON, setYourJSON] = useState(STARTING_JSON);\n  const [sending, setSending] = useState();\n  const [ipfsHash, setIpfsHash] = useState();\n  const [ipfsDownHash, setIpfsDownHash] = useState();\n\n  const [downloading, setDownloading] = useState();\n  const [ipfsContent, setIpfsContent] = useState();\n\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n  \n  const [addr, setAddr] = useState('');\n  const [amount, setAmount] = useState('');\n  const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n  var weiAmount;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n      <BrowserRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              NNNToken\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key=\"/debugcontracts\">\n            <Link\n              onClick={() => {\n                if (confirm('Do you want to enter Advanced Contract functionality?')) {\n                  setRoute(\"/debugcontracts\");\n                  window.location.href = '/debugcontracts';\n                } else {\n                  setRoute(\"/\");\n                } \n              }}\n              \n            >\n              Advanced Features\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n            \n          \n            \n      <center>\n      <pre>     </pre>\n      <b><label for=\"addr\">Address:  </label></b>\n      <input placeholder=\"wallet address\" id=\"addr \"style= {{color: 'black'}} onChange={event => setAddr(event.target.value)} />\n      <pre>     </pre>\n      <b><label for=\"amount\">Amount:  </label></b>\n      <input placeholder=\"NNN token amount\" id=\"amount\" style= {{color: 'black'}} onChange={event => setAmount(event.target.value)} />\n    \n\t    <div style={{ width: 640, marhin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n\n\t   \n      <Button\n                  onClick={async () => {\n                    console.log(\"MINT NNN Token!\");\n                    weiAmount = web3.utils.toWei(amount, 'ether');\n                    console.log(weiAmount, amount);\n                    tx(writeContracts.NNNToken.mint(addr, weiAmount)); //11100000000000000000\n                  }}\n                >\n                  Mint\n            </Button>\n            </div>\n        </center>\n            \n          </Route>\n\n          <Route path=\"/debugcontracts\">\n            <Contract\n              name=\"NNNToken\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n              contractConfig={contractConfig}\n            />\n            {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n            */}\n          </Route>\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {faucetHint}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\r\nimport { loadAppContracts } from \"../helpers/loadAppContracts\";\r\n\r\nexport const useContractConfig = () => {\r\n  const [contractsConfig, setContractsConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    const loadFunc = async () => {\r\n      const result = await loadAppContracts();\r\n      setContractsConfig(result);\r\n    };\r\n    void loadFunc();\r\n  }, []);\r\n  return contractsConfig;\r\n};\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}